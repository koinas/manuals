
**********************************GIT Основы

GIT это база данных которая хранит файлы всего проекта. 
Проект храниться как на компьютере разработчика так и на центральном сервере.
Обмен изменениями происходит через центральный сервер. Сначала один разработчик созраняет изменения в своем локальном репозитории. Затем отправляет изменения на централдьный сервер.
Когда разработчик решает что изменения правильные и годятся для созранения они добавляются в локальное хранилище. Хранилище называется репозиторий.
Сохраненнное состояние проекта называется коммитом. А сохранить изменение называют закоммитить.
Каждому коммиту система присваивает идентификатор и поволяет в любой момент вернуться на любой коммит.
Когда коммит сделан то добавление коммита на сервер называют запушить. 

****************************************Установка GIT

Установить GIT надо по этой ссылке
https://git-scm.com/download/win
Выбрать правильную версию и запустить.
В качестве радактора по умолчанию выбрать Notepad++
Выбрать Use Git from Bash only
Выбрать Use OpenSSL library
Выбрать Checkout As is, Commit as is
Выбрать Use MinTTY (the dafault terminal of MSYS2)
В extra options ничего не выбирать

После установки запустить терминал GIT Bash

Для работы можно использовать и граФический интерфейс но для начала чтоб лучше понять систему надо пользоваться коммандной строкой. В дальнейшем все комманды будут описываться для командной строки.

*********************Настройка winmerge**************

winmerge должен быть установлен
git config diff.tool winmerge


*******************************Клонирование проекта

Для начала надо скопировать проект с сервера на локальный компьютер. Это называется клонирвание.
Сначала надо получить ссылку на репозиторий.
Надо зайти на сервер по адресу http://192.168.1.64:7990/
Указать логин и пароль. Пришлю отддельно по почте.
ВВерху слева нажать Projects. Затем войти в нужный проект. В проекте может быть много репозиториев. Затем войти в нужный репозиторий. Тогда слева будут вертикальные менюшки. Вторая сверзу подсвечивается как Clone. Нажать и скопировать ссылку.

Затем открыть терминал и перейти в нем в ту директорию в которой нужно будет создать проект.
Перейти на диск нужный > сd e: enter
перейти в директорию > cd имя_директории enter
посмотреть список файлов и директорий > ls enter

Перейдя в директорию написать команду
> git clone ссылкассервера

После этого проект начнет скачиваться. В директории создастся еще одня директрия по имени проекта.
Затем надо перейти в нее.
Если мы перешли правильно то в терминале в конце пути будет высвечено (master).
Это значит стать на проект. master название основной ветки.
В дальнейшем все комманды надо вводить стоя на проекте.

**********************************Коммит и пуш*******************

Если проект склонировался успешно то его можно менять и модифицировать.
Когда все изменения сделаны и пришла очередь закоммитить то надо действовать так.
Команда git status -u покажет все файлы которые были изменены.
Надо решить какие файлы пойдут в коммит а какие нет.
Тут зависит от проекта. Для работы с git надо понимать за что отвечает тот или иной файл.
Список расширений я привел ниже. Всегда можно посмотреть.
Когда определилились с файлами то нужные файлы добавляем в коммит.
Команда > git add *.cpp 
Файлы добавляются по маске расширения. Команда выше добавит все файлы с расширением cpp.
После вызвав git status -u можно увидеть что добавленые файлы выделены зеленым цветом. 
Так добавив все нужные файлы коммитим проект.
>> git commit -m "описание коммита"
Описание надо стараться делать кратким. Латинским алфавитом. Если нескольео разных ыещей то перечислить кратко через запятую.
Закоммитив можно проверить что коммит довавлен.
>> git log
Поважет все коммиты.

Чтоб запушить на сервер надо команду ввести такую
>> git push

Появится окно с просьбой пароля. Указав пароль проект запушится на сервер.


***********************Как проверить отстаем или опережаем удаленную ветку

git remote update
git status -uno

Покажет оставание или опережения но не внесет изменения с сервера

***************Как отменить изменения***************

если какието файлы добавили через git add то отменить можно коммандой
git reset
Изменения в файлах останутся но файлы из списка на коммит пропадут

Отменить изменения во всех файлах 
git checkout .
Выполнять из корневой директории
или
git reset --hard HEAD

Отенить изменения в конкретном файле 
git chekout путь к файлу относительно корневой директории


********************Как проверить что изменено перед коммитом********

Перед коммитом всегда желательно посмотреть файлы на предмет изменений. WinMerge программа позволяет сравнивать файлы с предыдущим коммитом и отображать разницу.
Допустим есть в проекте изменения. Чтоб посмотреть разницу пишем:

>> git difftool

На экране появится примерно такое: (Если в проекте есть изменения).
Если изменений нет то ничего не будет.

Viewing (1/1): 'doc/changelog.txt'
Launch 'winmerge' [Y/n]: y

Гит будет перебирать файлы с изменениями и предлагать запустить winmerge.
Нажимаем Y сли хотим посмотерть этот файл или N если не хотим.
Запуститься winmerge в котором будут показаны отличия.
ВАЖНО
Так часть в которой путь ведет на директорию проекта показывает последнюю версию.
А та где путь идет не в проект а во временную директорию винды это послений коммит.
Гит сравнивает текущее состояние с последним коммитом. Для посленего коммита файлы распаковываются во временную директорию. 
Закрыв winmerge  консоли появится предложение посмотреть следующий файл.


***********************Как взять обновления с удаленой ветки******

Иногда при коммите гит может ругнуться что локальная ветка отстала от ветки на сервере. Тогда надо перед комитом взять с сервера обновления.
> git pull

Гит скачает изменения и попытается их добавить в локальную. Это называется merge.
Если получиться то мердж произойдет автоматически. 
Но может и не выйти. В таком случае гит переключится в режим ручного мерджа и придложит пользователю мерджить вручную. Это видно будет по тому что в конце коммандной строки будет не master a master|merge.

********************Как стать на коммит и вернуться обратно***********

Чтоб перейти на предыдущий коммит надо выполнить 

> git checkout <первые пять цифр из id коммита>

Чтобы вернуться обратно надо выполнить 

> git checkout master

*************************РАБОТА С ВЕТКАМИ********************

************Как посмотреть ветки***********************
git branch -a

************Как создать новую ветку****************
git branch <branch_name>

*************Как стать на новую ветку**************
git checkout <branch_name> если уже создан
git checkout -b <branch_name> создать и перейти

*************Как положить новую ветку на сервер*****
git push -u origin <branch_name>





Описание файлов которые входят в проект Visual Studio

1. *.cpp - файл с кодом НАДО добавлять в коммит
2. *.h - файл с кодом НАДО добавлять в коммит
3. *.VXD  - драйвер LPT порта, иногда попадается в проектах. Не используется давно. Не коммитить. Стереть если будет замечен.
4. *.aps  - файл хранит двоичное представление ресурсов в проекте. Используется для быстрой загрузки ресурсов. Не коммитить.
5. *.cfg - конфигурация программы. Генерироется при запуске. Не коммитить.
6. *.clw - используется для автоматизации добавления классов. Не коммитить.
7. *.dsp - хранит параметры проекта. НАДО добавлять в коммит.
8. *.dsw - хранит информацию о проектах в пространстве рабочего места. НАДО добавлять в коммит.
9. *.exe исполняемый файл. Не коммитить.
10. *.ncb - база парсера кода проекта. Отвечает за подсказки например.
Не коммитить.
11. *.hex - прошивки железа. Не коммитить.
12. *.ctf - программа среды MATLAB. Коммитить по усмотрению.
13. *.err - ошибки программы. Генерятся при запуске. Не коммитить.
14. *.lib - скомпилированные библиотечные файлы. Если используются для линковки проекта то коммитить. Если нет то удалить из проекта.
15. *.dll - код библиотек выполнения. Если проект собирает dll то не коммитить. Если dll используется как библиотека выполнения то коммитить.
16. *.mac - код макросов. Не коммитить.
17. *.obj - оттранслированные модули. Не коммитить.
18. *.sbr - временный файл (Browse Information). Не коммитить.
19. *.dat  - генериться программой при запуске. Не коммитить.
20. *.c - код проекта. НАДО коммитить.
21. *.pch = предкомпилируемый заголовок. Не коммитить.
22. *.ICO,*BMP,*CUR - ресурсы интерфейса. НАДО коммитить.
23. *.rc - ресурсы. НАДО коммитить.
24. *res - скомпилированный ресурс. Не коммитить.
25. *.opt - 
26. *.plg - 
27. .gitignore - КОММИТИТЬ. файл гит системы
28. rc2 - НАДО коммитить
29. *.pdb - отладочная база. Не коммитить.
30. *.ilk - Не коммитить
31. *.idb - Не коммитить
32. *.idb - Не коммитить
33. *.useк - Не коммитить
34. *.us
35. *.dep - файл описание зависимостей. Не коммитить.
36. *.exp  - информация об экспортированных функциях. Не коммитить.
37. *.suo - не коммитить
38. *.sln - 
Как создать .gitignore
ren gitignore.txt .gitignore from native cmd
put it in the working directory not in .git

Как удалить файл из индекса
git rm <имя файла>